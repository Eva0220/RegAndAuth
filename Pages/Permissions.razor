@page "/permissions"

@using InformBez.Data.Models;
@using InformBez.Data;
@using Microsoft.EntityFrameworkCore
@using InformBez.Repository

<style>
    .rz-grid-table {
        width: unset;
    }
</style>

<RadzenDataGrid @ref="usersGrid" AllowAlternatingRows="false" AllowFiltering="true" AllowPaging="true" PageSize="5" AllowSorting="true" EditMode="DataGridEditMode.Single"
                Data="@users" TItem="User" RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow" Sort="@Reset" Page="@Reset" Filter="@Reset">
    <Columns>
        <RadzenDataGridColumn TItem="User" Property="Id" Title="ID" Width="160px" Frozen="true" />
        <RadzenDataGridColumn TItem="User" Property="Name" Title="Name" Width="300px" />
        <RadzenDataGridColumn TItem="User" Property="Email" Title="Email" Width="300px" />
        <RadzenDataGridColumn TItem="User" Property="User.Role" Title="Role" Width="300px">
            <EditTemplate Context="user">
                <RadzenDropDown TValue="userRole" @bind-Value="user.Role" Data="@Roles" Style="width:100%; display: block;" />
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="User" Context="user" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Frozen="true" FrozenPosition="FrozenColumnPosition.Right">
            <Template Context="user">
                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(user))" @onclick:stopPropagation="true">
                </RadzenButton>
            </Template>
            <EditTemplate Context="user">
                <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveRow(user))">
                </RadzenButton>
                <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@((args) => CancelEdit(user))">
                </RadzenButton>
            </EditTemplate>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

<div class="text-end">
    <a class="btn text-center mt-2 col-1" style="background-color: #280869; color: white;  border-radius: .25rem" href="/TextEditor">Back</a>
</div>

@code {
    List<User> users;
    RadzenDataGrid<User> usersGrid;
    private readonly UsersRepository usersRepository;
    ApplicationContext context = new ();

    List<userRole> Roles = new()
    {
        userRole.User,
        userRole.Admin
    };

    User userToInsert;
    User userToUpdate;

    void Reset()
    {
        userToInsert = null;
        userToUpdate = null;
    }

    async Task EditRow(User user)
    {
        userToUpdate = user;
        await usersGrid.EditRow(user);
    }

    void OnUpdateRow(User user)
    {
        Reset();

        context.Update(user);

        context.SaveChanges();
    }

    async Task SaveRow(User user)
    {
        await usersGrid.UpdateRow(user);
    }

    void CancelEdit(User user)
    {
        Reset();

        usersGrid.CancelEditRow(user);

        var orderEntry = context.Entry(user);
        if (orderEntry.State == EntityState.Modified)
        {
            orderEntry.CurrentValues.SetValues(orderEntry.OriginalValues);
            orderEntry.State = EntityState.Unchanged;
        }
    }

    async Task DeleteRow(User user)
    {
        Reset();

        if (users.Contains(user))
        {
            context.Remove<User>(user);

            context.SaveChanges();

            await usersGrid.Reload();
        }
        else
        {
            usersGrid.CancelEditRow(user);
            await usersGrid.Reload();
        }
    }

    async Task InsertRow()
    {
        userToInsert = new User();
        await usersGrid.InsertRow(userToInsert);
    }

    void OnCreateRow(User user)
    {
        context.Add(user);

        context.SaveChanges();

        userToInsert = null;
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        users = UsersRepository.GetUsers();
    }
}


